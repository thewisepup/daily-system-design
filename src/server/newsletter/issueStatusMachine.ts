import { TRPCError } from "@trpc/server";
import type { IssueStatus } from "~/server/db/schema/issues";

/**
 * State machine for issue status transitions
 *
 * Allowed transitions:
 * - generating → draft, failed
 * - draft → approved
 * - failed → generating (for retry)
 * - approved → draft, sent
 *
 * Not allowed:
 * - draft → sent (must be approved first)
 * - sent → any status (final state)
 */
export const ALLOWED_TRANSITIONS: Record<IssueStatus, IssueStatus[]> = {
  generating: ["draft", "failed"],
  draft: ["approved"],
  failed: ["generating"], // Allow retry from failed state
  approved: ["draft", "sent"],
  sent: [], // Final state - no transitions allowed
};

/**
 * Validate if a status transition is allowed
 */
export function isTransitionAllowed(
  fromStatus: IssueStatus,
  toStatus: IssueStatus,
): boolean {
  return ALLOWED_TRANSITIONS[fromStatus]?.includes(toStatus) ?? false;
}

/**
 * Get all allowed next statuses for a given current status
 */
export function getAllowedNextStatuses(
  currentStatus: IssueStatus,
): IssueStatus[] {
  return ALLOWED_TRANSITIONS[currentStatus] ?? [];
}

/**
 * Validate and throw error if transition is not allowed
 */
export function validateStatusTransition(
  fromStatus: IssueStatus,
  toStatus: IssueStatus,
): void {
  if (!isTransitionAllowed(fromStatus, toStatus)) {
    throw new TRPCError({
      code: "BAD_REQUEST",
      message: `Invalid status transition: ${fromStatus} → ${toStatus}. Allowed transitions from ${fromStatus}: ${ALLOWED_TRANSITIONS[fromStatus]?.join(", ") || "none"}`,
    });
  }
}

/**
 * Check if an issue can be approved
 */
export function canApprove(currentStatus: IssueStatus): boolean {
  return isTransitionAllowed(currentStatus, "approved");
}

/**
 * Check if an issue can be unapproved (moved back to draft)
 */
export function canUnapprove(currentStatus: IssueStatus): boolean {
  return (
    currentStatus === "approved" && isTransitionAllowed(currentStatus, "draft")
  );
}

/**
 * Check if an issue can be sent
 */
export function canSend(currentStatus: IssueStatus): boolean {
  return isTransitionAllowed(currentStatus, "sent");
}

/**
 * Get user-friendly status descriptions
 */
export const STATUS_DESCRIPTIONS: Record<IssueStatus, string> = {
  generating: "Content is being generated by AI",
  draft: "Content is ready for review",
  failed: "Content generation failed",
  approved: "Content is approved and ready to send",
  sent: "Newsletter has been sent to subscribers",
};

/**
 * Get available actions for a given status
 */
export function getAvailableActions(currentStatus: IssueStatus): {
  canApprove: boolean;
  canUnapprove: boolean;
  canSend: boolean;
  canEdit: boolean;
} {
  return {
    canApprove: canApprove(currentStatus),
    canUnapprove: canUnapprove(currentStatus),
    canSend: canSend(currentStatus),
    canEdit: currentStatus === "draft" || currentStatus === "failed", // Allow editing in draft and failed states
  };
}
